@page "/resetpassword"
@using Frontend.Services
@using Frontend.Models
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<PageTitle>Reset Password</PageTitle>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card mt-5">
                <div class="card-body">
                    <h3 class="card-title text-center">Reset Password</h3>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger">
                            @errorMessage
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success">
                            @successMessage
                        </div>
                    }

                    <EditForm Model="@resetPasswordModel" OnValidSubmit="HandleResetPassword">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-group">
                            <label for="email">Email</label>
                            <InputText id="email" class="form-control" @bind-Value="resetPasswordModel.Email" />
                            <ValidationMessage For="@(() => resetPasswordModel.Email)" />
                        </div>

                        <div class="form-group mt-3">
                            <label for="token">Reset Token</label>
                            <InputText id="token" class="form-control" @bind-Value="resetPasswordModel.Token" />
                            <ValidationMessage For="@(() => resetPasswordModel.Token)" />
                        </div>

                        <div class="form-group mt-3">
                            <label for="newPassword">New Password</label>
                            <InputText type="password" id="newPassword" class="form-control" @bind-Value="resetPasswordModel.NewPassword" />
                            <ValidationMessage For="@(() => resetPasswordModel.NewPassword)" />
                        </div>

                        <div class="form-group mt-3">
                            <label for="confirmPassword">Confirm Password</label>
                            <InputText type="password" id="confirmPassword" class="form-control" @bind-Value="resetPasswordModel.ConfirmPassword" />
                            <ValidationMessage For="@(() => resetPasswordModel.ConfirmPassword)" />
                        </div>

                        <div class="form-group mt-3">
                            <button type="submit" class="btn btn-primary w-100" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <span class="ms-2">Loading...</span>
                                }
                                else
                                {
                                    <span>Reset Password</span>
                                }
                            </button>
                        </div>
                    </EditForm>

                    <div class="mt-3 text-center">
                        <a href="/login">Back to Login</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private ResetPasswordRequest resetPasswordModel = new() { Email = "", Token = "", NewPassword = "", ConfirmPassword = "" };
    private bool isLoading;
    private string? errorMessage;
    private string? successMessage;

    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query).TryGetValue("email", out var email))
        {
            resetPasswordModel.Email = email.ToString() ?? "";
        }
        if (Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query).TryGetValue("token", out var token))
        {
            resetPasswordModel.Token = token.ToString() ?? "";
        }
    }

    private async Task HandleResetPassword()
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            successMessage = null;

            var result = await AuthService.ResetPassword(resetPasswordModel);
            if (result.Success)
            {
                successMessage = "Password has been reset successfully.";
                resetPasswordModel = new ResetPasswordRequest() { Email = "", Token = "", NewPassword = "", ConfirmPassword = "" };
            }
            else
            {
                errorMessage = result.Message;
            }
        }
        catch
        {
            errorMessage = "An error occurred while resetting your password.";
        }
        finally
        {
            isLoading = false;
        }
    }
} 